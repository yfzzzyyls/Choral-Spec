import grpc
from . import inference_pb2
from . import inference_pb2_grpc

def create_stub(target_address):
    """
    Create and return a gRPC client stub for the SpeculativeService at the given address.
    """
    channel = grpc.insecure_channel(target_address)
    stub = inference_pb2_grpc.SpeculativeServiceStub(channel)
    return stub

def verify_draft_tokens(stub, draft_tokens):
    """
    Call the VerifyDraftTokens RPC with the given list of draft token IDs.
    Returns a tuple (target_probs, finished) where:
      - target_probs is a list of probabilities from the target model for each draft token.
      - finished is a boolean indicating if the target model has finished (reached EOS).
    """
    request = inference_pb2.VerifyRequest(draft_tokens=draft_tokens)
    response = stub.VerifyDraftTokens(request)
    # Extract data from response
    target_probs = list(response.target_probs)
    finished = response.finished
    return target_probs, finished

def finalize_tokens(stub, accepted_count):
    """
    Call the FinalizeTokens RPC with the number of draft tokens accepted.
    Returns a tuple (final_token_id, finished) where:
      - final_token_id is the token ID generated by the target model if a draft token was rejected (0 if none).
      - finished is a boolean indicating if the target model has finished generation.
    """
    request = inference_pb2.FinalizeRequest(accepted_count=accepted_count)
    response = stub.FinalizeTokens(request)
    final_token_id = response.final_token
    finished = response.finished
    return final_token_id, finished