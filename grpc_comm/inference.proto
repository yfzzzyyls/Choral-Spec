syntax = "proto3";
package specdecode;

service SpeculativeService {
  // Used by the draft client to initialize target generation.
  rpc StartGeneration(StartRequest) returns (StartResponse);
  // (Optionally, a single-token generation method.)
  rpc Generate(GenerateRequest) returns (GenerateResponse);
  // New method: verify an entire chunk of draft tokens in one shot.
  rpc VerifyDraftChunk(VerifyChunkRequest) returns (VerifyChunkResponse);
  // (Optional, legacy single-token verification.)
  rpc VerifyDraftToken(VerifyRequest) returns (VerifyResponse);
}

// Initialize the target model for generation.
message StartRequest {
  string prompt = 1;           // The initial prompt text
  int32 max_new_tokens = 2;    // Maximum number of new tokens to generate (if desired)
}
message StartResponse {
  bool acknowledged = 1;
}

// Used for single-token generation (optional)
message GenerateRequest {
  // For future use (e.g. context pass-through).
}
message GenerateResponse {
  int32 token_id = 1;
}

// Legacy single-token verification (optional)
message VerifyRequest {
  int32 draft_token_id = 1;
}
message VerifyResponse {
  bool match = 1;
  int32 correct_token_id = 2;
}

// New messages for chunk verification
message VerifyChunkRequest {
  repeated int32 draft_tokens = 1;  // The entire chunk proposed by the draft model
}
message VerifyChunkResponse {
  bool all_match = 1;               // True if the entire chunk matches
  uint32 match_prefix_length = 2;   // Number of tokens from the start that matched
  int32 correct_token_id = 3;       // If a mismatch occurred, the targetâ€™s token at that position
}