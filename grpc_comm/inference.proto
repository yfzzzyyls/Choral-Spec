syntax = "proto3";
package specdecode;

service SpeculativeService {
  // Existing single-token generation, if used
  rpc Generate(GenerateRequest) returns (GenerateResponse);

  // Possibly existing single-token verification, if you keep it
  rpc VerifyDraftToken(VerifyRequest) returns (VerifyResponse);

  // NEW: single-shot chunk verification
  rpc VerifyDraftChunk(VerifyChunkRequest) returns (VerifyChunkResponse);
}

// For single-token generation
message GenerateRequest {
  // (You can define fields like 'input_ids' or 'past_key_values' if needed.
  // This demo just uses a placeholder.)
}
message GenerateResponse {
  int32 token_id = 1;  // The single token the target model outputs
}

// For single-token verification (if you keep it)
message VerifyRequest {
  int32 draft_token_id = 1;
}
message VerifyResponse {
  bool match = 1;
  int32 correct_token_id = 2; // only if match=false
}

// NEW: chunk-based verification request
message VerifyChunkRequest {
  repeated int32 draft_tokens = 1;  // The entire chunk from draft
}

// NEW: chunk-based verification response
message VerifyChunkResponse {
  bool all_match = 1;               // True if entire chunk matched
  uint32 match_prefix_length = 2;   // # of tokens (from the start) that matched
  int32 correct_token_id = 3;       // The targetâ€™s correct token at first mismatch (if all_match=false)
}
